# --------------------------------------------------------------------------
# Class definition of BottleThread - this thread controls the Bottle Framework
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import sys
import os
import json
import signal
import time
from threading import Thread

import bottle
from bottle import Bottle, WSGIRefServer, request, static_file
from wsgiref.simple_server import make_server

# --- helper class (server)   --------------------------------------------


class Server(WSGIRefServer):
    """ Own Server object to gracefully shutdown server """

    def run(self, app):  # pragma: no cover
        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer
        from wsgiref.simple_server import make_server
        import socket

        class FixedHandler(WSGIRequestHandler):
            def address_string(self):  # Prevent reverse DNS lookups please.
                return self.client_address[0]

            def log_request(*args, **kw):
                if not self.quiet:
                    return WSGIRequestHandler.log_request(*args, **kw)

        handler_cls = self.options.get('handler_class', FixedHandler)
        server_cls = self.options.get('server_class', WSGIServer)

        if ':' in self.host:  # Fix wsgiref for IPv6 addresses.
            if getattr(server_cls, 'address_family') == socket.AF_INET:
                class server_cls(server_cls):
                    address_family = socket.AF_INET6

        srv = make_server(self.host, self.port, app, server_cls, handler_cls)
        self.srv = srv
        srv.serve_forever()

    def stop(self):
        self.srv.shutdown()

# --- thread running the server   ------------------------------------------


class BottleThread(Thread):
    """ Bottle thread """

    # initialize object   ----------------------------------------------------

    def __init__(self, settings):
        """ Constructor """

        super(BottleThread, self).__init__(name="BottleThread")
        self._settings = settings
        if settings.get_value('WEB', 'debug', '0') == '1':
            self._debug = True
            self._host = 'localhost'
        else:
            self._debug = False
            self._host = settings.get_value('WEB', 'host', '0.0.0.0')
        self._port = int(settings.get_value('WEB', 'port', '5000'))
        self._web_root = settings.get_value('WEB',
                                            'root', '/var/lib/nerd-sonic/web')
        self._app = Bottle("BottleThread")
        self._add_rules()

        self._server = Server(host=self._host, port=self._port)

    # --- query path   -------------------------------------------------------

    def _get_webpath(self, web_root, path):
        """ return webpath """
        return os.path.join(web_root, path)

    # add routing rules   ----------------------------------------------------

    def _add_rules(self):
        """ add routing rules """

        self._app.route(
            "/sensors/value", callback=self.save_value, method='POST')

    # --- shutdown the server   -----------------------------------------------

    def shutdown(self):
        """ shutdown server """
        self._server.stop()

    # run the thread   -------------------------------------------------------

    def run(self):
        """ run-method of thread """

        self._app.run(host=self._host, port=self._port,
                      server=self._server, debug=self._debug, reloader=False)

    # --- save radio settings   ----------------------------------------------

    def save_value(self):
        self._save_settings(json.loads(request.body.read()))
        return "Settings updated successfully!\n"

    # --- save changed settings   --------------------------------------------

    def _save_settings(self, obj, overwrite=True):
        """ save change settings """
        self._settings.log.msg("BottleThread: save_settings")

        keys = obj.keys()
        for name in keys:
            old_value = self._settings.get(name)
            value = obj[name]
            if old_value != value or overwrite is True:
                self._settings.set(name, value)
