import datetime

from PIL import Image
from PIL import ImageFont
from matplotlib.ticker import FormatStrFormatter
import matplotlib.dates as md
import matplotlib.pyplot as plt

import nsonic.ext.epd2in7b as epd2in7b

COLORED = 1
UNCOLORED = 0

class DisplayController():

    def __init__(self, settings):

        self._epd = epd2in7b.EPD()
        self._epd.init()
        self._frame_black = None
        self._frame_red = None
        self._clear()
        self._epd.set_rotate(epd2in7b.ROTATE_270)
        self._menu_block_size = int(self._epd.height / 4)
        self._is_main_menu = True

        self._settings = settings
        self._settings.log.msg("DisplayController: init")

    def update(self):
        self._draw()

    # pylint: disable=unused-argument
    def update_sensor_values(self):
        self._clear()
        temperatur_value = self._settings.get('sensors.temperatur.value')
        humidity_value = self._settings.get('sensors.humidity.value')
        tank_value = self._settings.get('sensors.tank.value')
        self._draw_main_menu(tank_value, humidity_value, temperatur_value)
        self._draw()

    def show_main_menu(self):
        self.update_sensor_values()

    def show_sub_menu(self, active=None):
        self._clear()
        self._draw_sub_menu(active)

    def show_plot_year(self, dates, values):
        filename = DisplayController._create_plot(dates, values, "%b")
        image = Image.open(filename)
        self._draw_image(image, 50, 1)

    def show_plot_month(self, dates, values):
        filename = self._create_plot(dates, values, "%d.")
        image = Image.open(filename)
        self._draw_image(image, 50, 1)

    def show_plot_week(self, dates, values):
        filename = self._create_plot(dates, values, "%a")
        image = Image.open(filename)
        self._draw_image(image, 50, 1)

    @staticmethod
    def _create_plot(dates, values, format_string):
        print(values)
        print(dates)
        plt.figure(figsize=(2.1, 1.7))
        plt.subplots_adjust(bottom=0.2)
        plt.xticks(rotation=45)
        ax = plt.gca()
        xfmt = md.DateFormatter(format_string)
        ax.yaxis.set_major_formatter(FormatStrFormatter('%.0f'))
        ax.xaxis.set_major_formatter(xfmt)
        plt.plot(dates, values)
        plt.savefig('plot.png')
        DisplayController._convert_png_to_bmp('plot.png')
        return 'plot.bmp'

    @staticmethod
    def _convert_png_to_bmp(filename):
        image = Image.open(filename)
        image.save('plot.bmp')

    def _clear(self):
        # clear the frame buffer
        self._frame_black = [0 for y in range(
            int(self._epd.width * self._epd.height / 8))]
        self._frame_red = [0 for y in range(
            int(self._epd.width * self._epd.height / 8))]

    def _draw(self):
        self._epd.display_frame(self._frame_black, self._frame_red)

    def _draw_image(self, image, offset_x=0, offset_y=0):
        # Image must be in mode 1.
        image_monocolor = image.convert('1')
        imwidth, imheight = image_monocolor.size
        if imwidth > self._epd.width or imheight > self._epd.height:
            raise ValueError('Image larger than display \
                ({0}x{1}).' .format(self._epd.width, self._epd.height))

        pixels = image_monocolor.load()
        for x in range(imwidth):
            for y in range(imheight):
                # Set the bits for the column of pixels at the current position.
                if pixels[x, y] == 0:
                    self._epd.set_pixel(self._frame_black,
                                        x + offset_x, y + offset_y, COLORED)

    def _draw_main_menu(self, tank, humidity, temperatur):
        if tank is None:
            tank = "-%"
        else:
            tank = str(tank) + "%"
        if humidity is None:
            humidity = "-%"
        else:
            humidity = str(humidity) + "%"
        if temperatur is None:
            temperatur = "-°C"
        else:
            temperatur = str(temperatur) + "°C"

        self._draw_menu()
        self._draw_image(Image.open(
            '/home/pi/Pictures/watertank_menu.bmp'), 3, 3)
        self._draw_main_string(0, tank.rjust(4), "")
        self._draw_image(Image.open(
            '/home/pi/Pictures/moisture_menu.bmp'), 3, self._menu_block_size + 3)
        self._draw_main_string(1, humidity.rjust(4), "")
        self._draw_image(Image.open(
            '/home/pi/Pictures/temperatur_menu.bmp'), 3, self._menu_block_size * 2 + 3)
        self._draw_main_string(2, temperatur.rjust(4), "")
        self._draw_image(Image.open(
            '/home/pi/Pictures/settings_menu.bmp'), 3, self._menu_block_size * 3 + 3)
        self._draw_time()

    def _draw_time(self):
        now = datetime.datetime.now()
        text = now.strftime("%Y-%m-%d %H:%M")
        block_size = self._menu_block_size
        font_size = 18
        font = ImageFont.truetype(
            '/usr/share/fonts/truetype/lato/Lato-Light.ttf', font_size)
        self._epd.draw_string_at(self._frame_black, block_size +
                                 75, self._epd.height - font_size - 2, text, font, COLORED)

    def _draw_sub_menu(self, active):
        self._draw_menu(active)
        self._draw_image(Image.open('/home/pi/Pictures/back_menu.bmp'), 3, 3)
        self._draw_menu_string(1, "w", active)
        self._draw_menu_string(2, "m", active)
        self._draw_menu_string(3, "y", active)

    def _draw_menu(self, active=None):
        for i in range(4):
            self._draw_menu_rectangle(i, active)

    def _draw_main_string(self, num, text, subtext):
        block_size = self._menu_block_size
        font_text = ImageFont.truetype(
            '/var/lib/nerd-sonic/fonts/ubuntu-font-family-0.83/UbuntuMono-B.ttf', 50)
        font_subtext = ImageFont.truetype(
            '/var/lib/nerd-sonic/fonts/ubuntu-font-family-0.83/UbuntuMono-R.ttf', 20)
        self._epd.draw_string_at(
            self._frame_black, block_size + 30, block_size * num - 3, text, font_text, COLORED)
        self._epd.draw_string_at(self._frame_black, block_size +
                                 120, block_size * num + 1, subtext, font_subtext, COLORED)

    def _draw_menu_string(self, num, label, active):
        block_size = self._menu_block_size
        font_size = 28
        font = ImageFont.truetype(
            '/var/lib/nerd-sonic/fonts/ubuntu-font-family-0.83/UbuntuMono-B.ttf', font_size)
        if active == num:
            self._epd.draw_string_at(self._frame_black, font_size / 4 + 6,
                                     font_size / 3 + block_size * num - 4, label, font, UNCOLORED)
        else:
            self._epd.draw_string_at(self._frame_black, font_size / 4 + 6,
                                     font_size / 3 + block_size * num - 4, label, font, COLORED)

    def _draw_menu_rectangle(self, num, active):
        block_size = self._menu_block_size
        if active == num:
            self._epd.draw_filled_rectangle(self._frame_black, 1, 1 + block_size * num, 1 + block_size, min(
                1 + block_size * (num + 1), self._epd.height - 1), COLORED)
        else:
            self._epd.draw_rectangle(self._frame_black, 1, 1 + block_size * num, 1 +
                                     block_size, min(1 + block_size * (num + 1), self._epd.height - 1), COLORED)
