#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of SensorsControllerThread - utility functions for the sensors
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import time
from threading import Thread

from nsonic.DisplayController import DisplayController


class DisplayStateThread(Thread):
    """ DisplayStateThread thread """

    POLL_INTERVAL = 0.2

    def __init__(self, settings):
        """ Constructor """

        super(DisplayStateThread, self).__init__(
            name="DisplayStateThread")
        self._settings = settings
        self._settings.log.msg("DisplayStateThread: init")
        self._stop_event = settings.stop_event
        self._settings.add_settings_listener(
            'sensors.temperatur.value', self._on_sensor)
        self._settings.add_settings_listener(
            'sensors.humidity.value', self._on_sensor)
        self._settings.add_settings_listener(
            'sensors.tank.value', self._on_sensor)
        self._settings.add_settings_listener(
            'sensors.button1.status', self._on_button)
        self._settings.add_settings_listener(
            'sensors.button2.status', self._on_button)
        self._settings.add_settings_listener(
            'sensors.button3.status', self._on_button)
        self._settings.add_settings_listener(
            'sensors.button4.status', self._on_button)
        self._display = DisplayController(settings)
        self._state = "main"
        self._state_change = False
        self._last_button = time.time()

    def run(self):
        """ run method of thread """

        self._settings.log.msg(
            "DisplayStateThread: running ...")

        self._display.show_main_menu()

        while not self._stop_event.wait(DisplayStateThread.POLL_INTERVAL):

            if self._state != "main" and time.time() - self._last_button >= 600:
                self._change_state("main")

            if self._state_change:
                self._state_change = False
                if self._state == "main":
                    self._display.show_main_menu()

                if "tank" in self._state:
                    if "week" in self._state:
                        self._display.show_sub_menu(1)
                        times, values = self._settings.database.get_week(
                            "sensors.tank.value")
                        self._display.show_plot_week(times, values)
                        self._display.update()
                    if "month" in self._state:
                        self._display.show_sub_menu(2)
                        times, values = self._settings.database.get_week(
                            "sensors.tank.value")
                        self._display.show_plot_month(times, values)
                        self._display.update()
                    if "year" in self._state:
                        self._display.show_sub_menu(3)
                        times, values = self._settings.database.get_week(
                            "sensors.tank.value")
                        self._display.show_plot_year(times, values)
                        self._display.update()

        self._settings.log.msg("DisplayStateThread: shutdown")

    def _on_sensor(self, _, old, new):

        if self._state == "main":
            self._settings.log.msg(
                "DisplayStateThread: update sensor values")
            self._change_state("main")

    def _on_button(self, name, old, new):
        """ check button status """

        if new == "off":
            return

        self._last_button = time.time()
        button = 0
        if name == "sensors.button1.status":
            button = 1
        elif name == "sensors.button2.status":
            button = 2
        elif name == "sensors.button3.status":
            button = 3
        elif name == "sensors.button4.status":
            button = 4

        if self._state == "main":
            if button == 1:
                self._change_state("tank_week")
        elif "tank" in self._state:
            if button == 1:
                self._change_state("main")
            elif button == 2:
                self._change_state("tank_week")
            elif button == 3:
                self._change_state("tank_month")
            elif button == 4:
                self._change_state("tank_year")

    def _change_state(self, state):
        self._state = state
        self._state_change = True
        self._settings.log.msg(
            "DisplayStateThread: state (%s)" % state)
