#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of LedControllerThread - utility functions for the LEDs
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

from threading import Thread

from nsonic.Led import Led


class LedControllerThread(Thread):
    """ LedControllerThread thread """

    POLL_INTERVAL = 0.3

    def __init__(self, settings):
        """ Constructor """

        super(LedControllerThread, self).__init__(name="LedControllerThread")
        self._settings = settings
        self._stop_event = settings.stop_event
        self._settings.log.msg("LedControllerThread: init")
        self._settings.log.msg(
            "LedControllerThread: setting up %s" % settings.get_value('GPIO', 'statusLed'))
        self._statusLed = Led(int(settings.get_value('GPIO', 'statusLed')))
        self._settings.log.msg(
            "LedControllerThread: setting up %s" % settings.get_value('GPIO', 'tankLed'))
        self._tankLed = Led(int(settings.get_value('GPIO', 'tankLed')))
        self._state = settings.get('state')
        self._tank_state = settings.get('tank.status')
        settings.add_settings_listener('state', self.on_state)
        settings.add_settings_listener('tank.status', self.on_tank)

    def run(self):
        """ run method of thread """

        self._settings.log.msg(
            "LedControllerThread: running ...")
        while not self._stop_event.wait(LedControllerThread.POLL_INTERVAL):
            if self._state == "starting":
                self._statusLed.on()
            elif self._state == "running":
                self._statusLed.toggle()
            elif self._state == "off":
                self._statusLed.off()
            else:
                self._settings.log.msg(
                    "LedControllerThread: [ERROR] Unkown status (%s)" % str(self._state))

            if self._tank_state == "full":
                self._tankLed.off()
            elif self._tank_state == "warning":
                self._tankLed.on()
            elif self._tank_state == "empty":
                self._tankLed.on()
            else:
                self._settings.log.msg(
                    "LedControllerThread: [ERROR] Unkown tanks status (%s)" % str(self._tank_state))

        self._tankLed.off()
        self._statusLed.off()
        self._settings.log.msg("LedControllerThread: shutdown")


    def on_state(self, name, old, new):
        """ process state changes """

        self._state = new

    def on_tank(self, name, old, new):
        """ process tank status changes """

        self._tank_state = new
