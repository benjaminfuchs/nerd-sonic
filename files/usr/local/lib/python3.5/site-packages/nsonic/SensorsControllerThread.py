#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of SensorsControllerThread - utility functions for the sensors
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import time
from threading import Thread

from nsonic.Buttons import Buttons
from nsonic.HCSR04 import HCSR04


class SensorsControllerThread(Thread):
    """ SensorsControllerThread thread """

    POLL_INTERVAL = 1

    def __init__(self, settings):
        """ Constructor """

        super(SensorsControllerThread, self).__init__(
            name="SensorsControllerThread")
        self._settings = settings
        self._settings.log.msg("SensorsControllerThread: init")
        self._stop_event = settings.stop_event
        self._buttons = Buttons(int(settings.get_value('GPIO', 'button1')),
                                int(settings.get_value('GPIO', 'button2')),
                                int(settings.get_value('GPIO', 'button3')),
                                int(settings.get_value('GPIO', 'button4')))
        self._buttons.add_listener(self._on_buttons)
        self._buttons.start()

        if settings.get_value('SENSORS', 'active', '1') != '0':
            self._sensor_type = settings.get_value('SENSORS', 'sonic')
            if self._sensor_type == "HCSR04":
                self._sensor = HCSR04(27, 18, settings.get('sensor.threshold'))
            else:
                self._settings.log.msg(
                    "SensorsControllerThread: [ERROR] Unkown sensor type (%s)" % str(self._sensor_type))
            self._sensor.add_listener(self._on_sensor)
            self._sensor.start()

    def run(self):
        """ run method of thread """

        self._settings.log.msg(
            "SensorsControllerThread: running ...")

        while not self._stop_event.wait(SensorsControllerThread.POLL_INTERVAL):
            pass

        self._buttons.stop()
        self._buttons.join()

        if self._sensor:
            self._sensor.stop()
            self._sensor.join()

        self._settings.log.msg("SensorsControllerThread: shutdown")

    def _on_sensor(self, state):

        self._settings.log.msg("SensorsControllerThread: sensor %s" % state)
        self._settings.set("sensors.tank.value", state)

    def _on_buttons(self, number, state):

        self._settings.log.msg(
            "SensorsControllerThread: button%s %s" % (number, state))
        self._settings.set("sensors.button" + str(number) + ".status", state)
