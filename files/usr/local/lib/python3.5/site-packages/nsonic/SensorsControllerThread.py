#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of SensorsControllerThread - utility functions for the sensors
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

from threading import Thread
import requests
import simplejson as json

from nsonic.Buttons import Buttons
from nsonic.HCSR04 import HCSR04


class SensorsControllerThread(Thread):
    """ SensorsControllerThread thread """

    POLL_INTERVAL = 1

    def __init__(self, settings):
        """ Constructor """

        super(SensorsControllerThread, self).__init__(
            name="SensorsControllerThread")
        self._settings = settings
        self._settings.log.msg("SensorsControllerThread: init")
        self._stop_event = settings.stop_event

        self._url = settings.get_value('sensors.url')
        self._port = settings.get_value('WEB', 'port')
        self._buttons = Buttons(int(settings.get_value('GPIO', 'button1')),
                                int(settings.get_value('GPIO', 'button2')),
                                int(settings.get_value('GPIO', 'button3')),
                                int(settings.get_value('GPIO', 'button4')))
        self._buttons.add_listener(self._on_buttons)
        self._buttons.start()

        if settings.get_value('SENSORS', 'active', '0') != '0':
            self._sensor_type = settings.get_value('SENSORS', 'sonic')
            if self._sensor_type == "HCSR04":
                self._sensor = HCSR04(int(settings.get_value('GPIO', 'trigger')),
                                      int(settings.get_value('GPIO', 'echo')))
            else:
                self._settings.log.msg(
                    "SensorsControllerThread: [ERROR] Unkown sensor type (%s)" % str(self._sensor_type))
        else:
            self._sensor = None

    def run(self):
        """ run method of thread """

        self._settings.log.msg(
            "SensorsControllerThread: running ...")

        while not self._stop_event.wait(SensorsControllerThread.POLL_INTERVAL):
            self.get_sensor()

        self._buttons.stop()
        self._buttons.join()

        self._settings.log.msg("SensorsControllerThread: shutdown")

    def get_sensor(self):
        value = self._sensor.get_value()
        self._settings.log.msg("SensorsControllerThread: sensor (%s)" % value)

        data = {'sensors.tank.value': value}
        headers = {'Content-type': 'application/json'}
        response = requests.post(
            self._url + ":" + self._port, data=json.dumps(data), headers=headers)
        self._settings.log.msg(
            "SensorsControllerThread: response (%s)" % response)

    def _on_buttons(self, number, state):

        self._settings.log.msg(
            "SensorsControllerThread: button%s %s" % (number, state))
        self._settings.set("sensors.button" + str(number) + ".status", state)
