import datetime
import time
import os
from tinydb import TinyDB, Query


class Database():

    def __init__(self, settings):
        default_store = os.path.expanduser("~")
        self._db = TinyDB(os.path.join(default_store, 'db.json'))

        self._settings = settings
        self._settings.log.msg("Database: init")
        self._settings.add_settings_listener(
            'sensors.humidity.value', self.on_value)
        self._settings.add_settings_listener(
            'sensors.tank.value', self.on_value)
        self._settings.add_settings_listener(
            'sensors.temperatur.value', self.on_value)

    def on_value(self, name, _, new):
        self._settings.log.msg("Database: saving name: %s, value: %s" % (name, new))
        self.set(name, new)

    def set(self, name, value, timestamp=None):
        if timestamp is None:
            timestamp = time.time()
        self._db.insert({'name': name, 'value': value,
                         'time': timestamp})

    def _get_time_frame(self, name, start, end):
        query = Query()
        json_object = self._db.search((query.name == name) & (
            query.time >= start) & (query.time <= end))
        return json_object

    def get_year(self, name):
        now = datetime.datetime.now()
        last = now - datetime.timedelta(years=1)
        json_object = self._get_time_frame(
            name, datetime.datetime.timestamp(last), datetime.datetime.timestamp(now))
        return Database._get_times_and_values(json_object)

    def get_month(self, name):
        now = datetime.datetime.now()
        last = now - datetime.timedelta(days=30)
        json_object = self._get_time_frame(
            name, datetime.datetime.timestamp(last), datetime.datetime.timestamp(now))
        return Database._get_times_and_values(json_object)

    def get_week(self, name):
        now = datetime.datetime.now()
        last = now - datetime.timedelta(days=7)
        json_object = self._get_time_frame(
            name, datetime.datetime.timestamp(last), datetime.datetime.timestamp(now))
        return Database._get_times_and_values(json_object)

    @staticmethod
    def _get_times_and_values(json_object):
        times, values = [], []
        for element in json_object:
            times.append(datetime.strptime(str(ement["time"]), '%Y-%m-%d %H:%M:%S'))
            values.append(element["value"])
        return times, values
