#!/usr/bin/python3
# --------------------------------------------------------------------------
# Class definition of Button
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/who_disposer
#
# --------------------------------------------------------------------------

import RPi.GPIO as GPIO
import time
from threading import Thread

class Buttons(Thread):
    """ Button class """

    def __init__(self, pin1, pin2, pin3, pin4):
        """ Constructor """
        super(Buttons, self).__init__(name="Buttons")

        self._pins = [pin1, pin2, pin3, pin4]
        self._listeners = []
        self._state = ["off", "off", "off", "off"]
        self._start_time = [None, None, None, None]
        print("setmode")
        GPIO.setmode(GPIO.BCM)
        for pin in self._pins:
            print(str(pin))
            GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        self._run = True

    def add_listener(self, function):
        self._listeners.append(function)

    def run(self):
        """ set status of button """
        while self._run:
            print("run")
            for i in range(1, len(self._pins)):
                if self._state[i] == "off" and not bool(GPIO.input(self._pins[i])):
                    self._state[i] = "on"
                    self._start_time[i] = time.time()
                    for listener in self._listeners:
                        listener(i, self._state[i])
                elif self._state[i] != "off" and bool(GPIO.input(self._pins[i])):
                    self._state[i] = "off"
                    for listener in self._listeners:
                        listener(i, self._state[i])

                self._check_long_press(i)

            self._run = False
            time.sleep(0.1)

    def _check_long_press(self, i):
        if self._state[i] == "on" and time.time() - self._start_time[i] > 10:
            self._state[i] = "long"
            for listener in self._listeners:
                listener(i, self._state[i])

    def stop(self):
        self._run = False
